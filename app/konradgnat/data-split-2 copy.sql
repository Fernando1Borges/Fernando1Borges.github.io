PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;


CREATE TABLE IF NOT EXISTS "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL UNIQUE, "slug" varchar(200) NOT NULL UNIQUE, "updated_on" datetime NOT NULL, "content" text NOT NULL, "created_on" datetime NULL, "status" integer NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "preview" varchar(200) NOT NULL);

INSERT INTO blog_post VALUES(2,
'What is Redux-Saga','what-redux-saga','2020-12-28 01:57:11.835306',replace(replace('<div class="jumbotron_image__redux-saga">\r\n      <img class="img-responsive" src="../static/images/redux-saga.png" alt="redux-saga" />\r\n    </div>\r\n<p>Redux saga is a redux middleware library that is designed to simplify, make more efficient and easier to test the handling of side effects and network requests in your redux app.</p>\r\n\r\n            <p>Redux-Saga is a middleware which means that it can be started, paused and cancelled from the main application with normal redux actions. It can dispatch redux actions and has access to the full redux application state.</p>\r\n\r\n            <p>It uses a new ES6 feature called ‘Generators’ that allows us to write asynchronous code that looks synchronous and is easy to test. </p>\r\n\r\n            <p>This seems to be the currently preferred library to what was commonly used before: redux-thunk. As it states in the docs; with redux-saga ‘you don’t end up in callback hell, you can test your asynchronous flows easily and your actions stay pure.’</p>\r\n\r\n            <p>With react-thunk it was required to return a function and deal with a promise chain. Instead with redux-saga we write a simple try/catch block to catch any errors involved with request and use ‘put’ to dispatch an action to notify our reducers.</p>\r\n\r\n            <p>Install:</p>\r\n            <code>$ yarn add redux-saga</code>\r\n\r\n            <section class="blog_links">\r\n              <h3>Links</h3>\r\n              <div class="well well-lg">\r\n              <p>\r\n              <a href="https://github.com/redux-saga/redux-saga">Github</a>\r\n              </p>\r\n              <p>\r\n              <a href="https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html">Official Documentation and Tutorial</a>\r\n              </p><p>\r\n              <a href="https://redux-saga.js.org/docs/ExternalResources.html">Info on Generators</a>\r\n                </p>\r\n              </div>\r\n            </section>','\r',char(13)),'\n',char(10)),'2017-12-03 01:41:57',1,1,'Redux saga is a redux middleware library that is designed to simplify...');



INSERT INTO blog_post VALUES(3,'How to test a react app with Jest','how-test-react-app-jest','2020-12-28 02:08:47.068225',replace(replace('<div class="jumbotron_image__logo">\r\n      <img class="img-responsive" src="../static/images/jest.png" alt="jest" />\r\n    </div>\r\n<p>Jest is a testing framework maintained by Facebook to test React apps.  </p>\r\n\r\n            <h3>Install and Configure</h3>\r\n            <code>$ yarn add —dev jest</code>\r\n\r\n            <p>If you started your app with create-react-app boilerplate a lot of the configuration will already exist. To start testing all you need to do is run npm test.</p>\r\n            <p>The file that you are testing should reside in a file that has the same name with .test.js ending. \r\n            This file should reside in mirror directory structure vis a vi it’s counterpart. </p>\r\n            <p>Import the file at the top of the page. Typically you would create a wrapper ''describe'' function for the main piece of code being tested with nested ''describe'' statements for each smaller sub feature. \r\n            Each feature is tested with a ''it'' function, the first parameter is a string describing this feature and giving it a title. The next parameter is a function holding the main test logic. \r\n            Each assertion is tested with expect(some code here).toEqual(what it should equal)</p>\r\n            <p>Here''s an example.</p>\r\n            <pre>\r\n              <code>\r\n                describe(''Name of what''s being tested, () => {\r\n\r\n                      describe(''name of function tested'', () => {\r\n\r\n                          it(''description of path being tested'', () => {\r\n\r\n                              /* code logic here */\r\n\r\n                              expect(\r\n                                  /* some function input */\r\n                              ).toEqual(\r\n                                  /* expected function output */\r\n                              )\r\n                          });\r\n                      });\r\n                  });\r\n              </code>\r\n            </pre>\r\n\r\n            <p>Learn more at the official Jest tutorial, link below.</p>\r\n\r\n            <section class="blog_links">\r\n              <h3>Links</h3>\r\n              <div class="well well-lg">\r\n              <p>\r\n              <a href="https://facebook.github.io/jest/docs/en/tutorial-react.html">Official tutorial</a>\r\n              </p>\r\n              </div>\r\n            </section>','\r',char(13)),'\n',char(10)),'2017-12-10 01:57:52',1,1,'Jest is a testing framework maintained by Facebook to test React...');

INSERT INTO blog_post VALUES(4,'Min and max heaps in Python3','min-and-max-heaps-python3','2020-12-28 02:08:59.341545',replace(replace('<div class="jumbotron_image__logo">\r\n      <img class="img-responsive" src="../static/images/heaps.jpg" alt="heaps" />\r\n\r\n    </div>\r\n\r\n\r\n            <p>A min and max heap is a binary heap which is a binary tree that is ordered in a specific way. In the min heap each node is greater than or equal to the value of its parent, with the minimum value element at its root. For the max-heap the opposite is true. </p>\r\n\r\n            <p>The heap data structure was invented by J. W. J. Williams in 1964, as a data structure for the heapsort sorting algorithm. He was a British born computer scientist that spent the latter part of his career in Ottawa, Canada. The heapsort algorithm divides it’s input into sorted and unsorted regions and it iteratively shrinks the unsorted region by extracting the largest element and moving that to the sorted region. </p>\r\n            <img class="img-responsive center-image" src="../static/images/sorting_heapsort.gif" />\r\n            <p class="caption-center">heapsort algorithm in action</p>\r\n\r\n            <p>Heaps are usually implemented in an array. In a one based array, (array keeping a zero as the first element) each node has a left child at index * 2 and a right child at index * 2 + 1.  To get to the parent node, divide index by 2. To implement this data structure in python, we will create a class with the following functions.</p>\r\n            <h3>Public functions</h3>\r\n\r\n            <p><code>push(newItem)</code><br/>This adds a new item to the heap.</p>\r\n\r\n            <p><code>pop()</code><br/>This removes the min or max item.</p>\r\n\r\n            <p><code>peek()</code><br/>This returns the root item.</p>\r\n            <h3>Private functions</h3>\r\n\r\n            <p><code>__swap(item1, item2)</code><br/>Exchanges two items.</p>\r\n\r\n            <p><code>__floatUp()</code><br/>Moves item up to its proper position in the heap.</p>\r\n\r\n            <p><code>__bubbleDown()</code><br/>Moves item down to its proper position.</p>\r\n\r\n\r\n            <p>With these functions our implementation of a max heap looks like this. To get a min heap, all you have to do is reverse some of the inequality signs</p>\r\n            <pre>\r\n              <code>\r\n  class MaxHeap:\r\n    def __init__(self, items=[]):\r\n      super().__init__()\r\n      self.heap = [0]\r\n      for i in items:\r\n        self.heap.append(i)\r\n        self.__floatUp(len(self.heap) - 1)\r\n\r\n    def push(self, data):\r\n      self.heap.append(data)\r\n      self.__floatUp(len(self.heap) - 1)\r\n\r\n    def peek(self):\r\n      if len(self.heap) > 1:\r\n        return self.heap[1]\r\n      else:\r\n        return False\r\n        \r\n    def pop(self):\r\n      if len(self.heap) > 2:\r\n        self.__swap(1, len(self.heap) - 1)\r\n        max = self.heap.pop()\r\n        self.__bubbleDown(1)\r\n      elif len(self.heap) == 2:\r\n        max = self.heap.pop()\r\n      else: \r\n        max = False\r\n      return max\r\n\r\n    def __swap(self, i, j):\r\n      self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\r\n\r\n    def __floatUp(self, index):\r\n      parent = index//2\r\n      if index <= 1:\r\n        return\r\n      elif self.heap[index] > self.heap[parent]:\r\n        self.__swap(index, parent)\r\n        self.__floatUp(parent)\r\n\r\n    def __bubbleDown(self, index):\r\n      left = index * 2\r\n      right = index * 2 + 1\r\n      largest = index\r\n      if len(self.heap) > left and self.heap[largest] < self.heap[left]:\r\n        largest = left\r\n      if len(self.heap) > right and self.heap[largest] < self.heap[right]:\r\n        largest = right\r\n      if largest != index:\r\n        self.__swap(index, largest)\r\n        self.__bubbleDown(largest)\r\n              </code>\r\n            </pre>\r\n            \r\n            <p>To practice this concept try solving a problem like the <a class="plain_link" href="http://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/">running mean</a> using heaps.</p>\r\n            <section class="blog_links">\r\n              <h3>Links</h3>\r\n              <div class="well well-lg">\r\n              <p>\r\n              <a class="plain_link" href="https://www.geeksforgeeks.org/binary-heap/">Geeks for geeks</a>\r\n              </p>\r\n              <p>\r\n              <a class="plain_link" href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Wikipedia</a>\r\n              </p><p>\r\n              <a class="plain_link" href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html">More reading</a>\r\n                </p>\r\n              </div>\r\n            </section>','\r',char(13)),'\n',char(10)),'2017-12-17 01:59:48',1,1,'A min and max heap is a binary heap which is a binary tree that is ordered');



INSERT INTO blog_post VALUES(default,'The Trie Data Structure in Python3','trie-data-structure-python3','2021-01-01 03:07:33.606147',replace(replace('<div class="jumbotron_image__logo">\r\n      <img class="img-responsive" src="../static/images/trie2.png" alt="trie" />\r\n\r\n    </div>\r\n            <p>The trie is a data structure that is optimally efficient storage tree usually used for strings. It is an ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings. The trie can insert and find strings in O(L) time where L is the length of the word. This can be more advantageous in certain situations over a hash table when you want to find words that have the same prefix in common and other similar cases. A trie can be met with in coding interviews but also can be useful in real world applications in software engineering. For example, auto complete text, orthographic corrector and other similar cases can be done very fast with a trie. </p>\r\n\r\n            <p>Tries were first used by Rene de la Briandais in 1959. The term trie comes from the middle syllable of reTRIEval, first coined by Edward Fredkin. It is usually pronounced as ‘try’ to distinguish it verbally from ‘tree.’</p>\r\n            <img class="img-responsive center-image" src="../static/images/trie.png" />\r\n            <p class="caption-center">A trie with the words “tree”, “trie”, “algo”, “assoc”, “all”, and “also.”</p>\r\n            <p>This implementation of the trie in python will have these functions:</p>\r\n            <ol>\r\n                <li>insert. This will add a single string word to the trie. </li>\r\n                <li>search. Returns true or false if the string is found.</li>\r\n                <li>startsWith. Returns the number of words that have this prefix.</li>\r\n            </ol>\r\n            <pre>\r\n              <code>\r\n              class TrieNode:\r\n                def __init__(self):\r\n                  self.val = None\r\n                  self.size = 0\r\n                  self.pointers={}\r\n                  \r\n              class Trie:\r\n                def __init__(self):\r\n                  self.root = TrieNode()\r\n                  \r\n                def insert(self, word):\r\n                  self.rec_insert(word, self.root)\r\n                  return\r\n                \r\n                def rec_insert(self, word, node):\r\n                  if word[:1] not in node.pointers:\r\n                    newNode=TrieNode()\r\n                    newNode.val=word[:1]\r\n                    newNode.size = 0\r\n                    node.pointers[word[:1]]=newNode\r\n                    self.rec_insert(word, node)\r\n                  else:\r\n                    nextNode = node.pointers[word[:1]]\r\n                    nextNode.size += 1\r\n                    if len(word[1:])==0:\r\n                      nextNode.pointers['' '']=''__END__''\r\n                      return\r\n                    return self.rec_insert(word[1:], nextNode)\r\n                    \r\n                def search(self, word):\r\n                  if len(word)==0:\r\n                    return False\r\n                  return self.rec_search(word,self.root)\r\n                \r\n                def rec_search(self, word, node):\r\n                  if word[:1] not in node.pointers:\r\n                    return False\r\n                  else:\r\n                    nextNode = node.pointers[word[:1]]\r\n                    if len(word[1:])==0:\r\n                      if '' '' in nextNode.pointers:\r\n                        return True\r\n                      else:\r\n                        return False\r\n                    return self.rec_search(word[1:],nextNode)\r\n                  \r\n                def startsWith(self, prefix):\r\n                  if len(prefix)==0:\r\n                    return 0\r\n                  return self.rec_search_prefix(prefix, self.root)\r\n                \r\n                def rec_search_prefix(self, word, node):\r\n                  if word[:1] not in node.pointers:\r\n                    return 0\r\n                  else:\r\n                    if len(word[1:])==0:\r\n                      nextNode = node.pointers[word[:1]]\r\n                      return nextNode.size\r\n                    nextNode = node.pointers[word[:1]]\r\n                  return self.rec_search_prefix(word[1:],nextNode)\r\n              </code>\r\n            </pre>\r\n            \r\n            <p>To practice this concept try solving a problem like the \r\n              <a target="_blank" class="plain_link" href="https://www.hackerrank.com/challenges/ctci-contacts/problem">contacts search application</a> using a trie.</p>\r\n            <section class="blog_links">\r\n              <h3>Links</h3>\r\n              <div class="well well-lg">\r\n              <p>\r\n              <a target="_blank" class="plain_link" href="https://www.geeksforgeeks.org/trie-insert-and-search/">Geeks for geeks</a>\r\n              </p>\r\n              <p>\r\n              <a target="_blank" class="plain_link" href="https://en.wikipedia.org/wiki/Trie">Wikipedia</a>\r\n              </p><p>\r\n              <a target="_blank" class="plain_link" href="https://www.topcoder.com/community/data-science/data-science-tutorials/using-tries/">Top Coder</a>\r\n                </p>\r\n              </div>\r\n            </section>','\r',char(13)),'\n',char(10)),'2017-12-23 02:09:48',1,1,'The trie is a data structure that is optimally efficient storage tree ...');

INSERT INTO blog_post VALUES(default,'Bubble Sort and Quicksort Algorithms in Python3','bubble-sort-and-quicksort-algorithms-python3','2020-12-28 02:13:18.144549',
replace(replace('<p>Bubble sort is a not very efficient algorithm and generally not used in real world applications. It is the simplest sorting algorithm It works by iterating over the array of values and swapping them if they are in the wrong order. Hence they ‘bubble up’ to their proper positions.</p>\r\n\r\n            <p>The simplest version will always run in O(n^2) time, even if the array is already sorted. An optimized version will stop once the inner loop didn’t swap once.</p>\r\n            <img class="img-responsive center-image" src="../static/images/blog/bubble_sort.gif" />\r\n            <p class="caption-center">A bubble sort algorithm</p>\r\n            <p>Time Complexity:</p>\r\n            <ul>\r\n                <li>Best Case: O(n)</li>\r\n                <li>Worst Case: O(n^2)</li>\r\n                <li>Average: O(n^2)</li>\r\n            </ul>\r\n            <pre>\r\n              <code>\r\n    n = 7\r\n    a = [4,3,8,6,1,2,6]\r\n    \r\n    swaps = 0\r\n    for x in range(n):\r\n        currentSwaps = 0\r\n        for z in range(0, n-1):\r\n          if a[z] > a[z+1]:\r\n              a[z], a[z + 1] = a[z + 1], a[z]\r\n              swaps += 1\r\n              currentSwaps += 1\r\n        if currentSwaps = 0\r\n        break\r\n              </code>\r\n            </pre>\r\n          <div class="horizontal-space-md"></div>    \r\n            <h3>Quicksort</h3>\r\n            <p>This is a very efficient sorting algorithm. It was developed by a British Computer Scientist Tony Hoare in 1959 and published in 1961. </p>\r\n            <p>It is a “Divide and Congquer” algorithm like Merge Sort. It picks an element as a pivot and partitions the array around it. It puts on one side all elements lower and on the other side all those that are higher.</p>\r\n            <p>There are different versions of the algorithm that pick the first pivot in different ways. Either as the first, last, random or median element in the array. </p>\r\n            <p>Time Complexity:</p>\r\n            <ul>\r\n                <li>Best Case: O(n log n)</li>\r\n                <li>Worst Case: O(n^2)</li>\r\n                <li>Average: O(n log n)</li>\r\n            </ul>\r\n            <img class="img-responsive center-image" src="../static/images/blog/quicksort.gif" />\r\n            <p class="caption-center">A quicksort algorithm</p>\r\n            <pre>\r\n                <code>\r\n    def partition(arr,low,high):\r\n        i = ( low-1 )         # index of smaller element\r\n        pivot = arr[high]     # pivot\r\n\r\n        for j in range(low , high):\r\n            if   arr[j] <= pivot:\r\n                i = i+1\r\n                arr[i],arr[j] = arr[j],arr[i]\r\n        arr[i+1],arr[high] = arr[high],arr[i+1]\r\n        return ( i+1 )\r\n\r\n    def quicksort(arr,low,high):\r\n        if low < high:\r\n            pi = partition(arr,low,high)\r\n            quicksort(arr, low, pi-1)\r\n            quicksort(arr, pi+1, high)\r\n                </code>\r\n            </pre>',

'\r',char(13)),'\n',char(10)),'2018-01-02 02:13:06',1,1,'Bubble sort is a not very efficient algorithm ...');

INSERT INTO blog_post VALUES(default,'The Longest Common Subsequence Problem','longest-common-subsequence-problem','2020-12-28 02:14:26.695506',

replace(replace('
<p>This is a classic computer science problem. It is the basis of data comparison programs like the diff utility, and for version control systems like Git. The idea is to find the longest subsequence to all the sequences, most often involving only two. This is a problem that can be solved using dynamic programming. Dynamic programming is a method for solving complex problems by breaking the problem down into smaller sub problems. Each sub problem is solved just once, it’s solution is stored so that the next time the same subproblem occurs, instead of recomputing it’s solution, it is returned from memory. This technique of storing solutions to sub problems to be retrieved later when needed is called ‘memoization.’</p>\r\n          \r\n            <p>The naive solution for this problem would be to generate all possible subsequences and find the longest matching subsequence. This solution is exponential in terms of time complexity. Because this problem has the following two properties it can be approached with a dynamic programming technique. This problem has an <u>optimal substructure</u>. This means that it can be broken down into smaller and simpler subproblems. This problem also has <u>overlapping subproblems</u> which means that the sub problems repeat themselves. These two properties make this problem solvable by a dynamic programming technique.</p>\r\n            <p>The first property, the optimal substructure, is that it is composed of repeating sub problems. Suppose that two strings end with the same letter. Removing that letter and adding it to the resulting substring, you are left with two shorter strings. The solution can be found by repeating this process on the shorter strings until there are no letters left. If the last letters are not the same, the answer can be found by finding the max of either substring A with the last letter removed compared with substring B or substring A compared with substring B with the last letter removed.</p>\r\n            <p>The second property, the overlapping subproblems, means that in the above described recursive method the same problem is repeatedly solved. This recomputation can be avoided by either using memoization or tabulation. In this solution we will use tabulation.</p>\r\n            <p>The function LCS_calc() which creates the table of the length of the longest common subsequence (LCS). The function LCS_find() goes through that table, retrieves and prints the LCS. </p>\r\n            <p>Time Complexity:</p>\r\n            <ul>\r\n                <li> O(mn)</li>\r\n            </ul>\r\n            <pre>\r\n              <code>\r\n  function LCS(x, y) {\r\n    x = x.split('''');\r\n    y = y.split('''');\r\n    var lcs = [];\r\n    return LCS_calc(lcs, x, y);\r\n  }\r\n  \r\n  function LCS_calc(lcs, x, y) {\r\n    var i, j, m = x.length, n = y.length;\r\n    for(i = 0; i < m+1; i++) {\r\n      for(j = 0; j < n+1; j++) {\r\n        if (j===0) {\r\n          lcs[i] = [];\r\n        }\r\n        if (i===0 || j===0) {\r\n          lcs[i][j] = 0;\r\n        } else if (x[i-1] === y[j-1]) {\r\n          lcs[i][j] = lcs[i-1][j-1]+1;\r\n        } else {\r\n          lcs[i][j] = Math.max(lcs[i-1][j], lcs[i][j-1]);\r\n        }\r\n      }\r\n    }\r\n    return LCS_find(lcs, x, y, m, n);\r\n  }\r\n  \r\n  function LCS_find(lcs, x, y, m, n) {\r\n    var current = lcs[m][n],\r\n        result = [];\r\n    while (current > 0 && m > 0 && n > 0) {\r\n      if (lcs[m][n-1] === lcs[m][n]-1 && lcs[m-1][n] === lcs[m][n]-1) {\r\n        m--;\r\n        n--;\r\n        current--;\r\n        result.unshift(x[m]);\r\n      } else if (lcs[m][n-1] === lcs[m][n] && lcs[m-1][n] === lcs[m][n] && lcs[m-1][n-1] === lcs[m][n]) {\r\n        m--;\r\n        n--;\r\n      } else if (lcs[m-1][n] === lcs[m][n]-1 && lcs[m][n-1] === lcs[m][n]) {\r\n        n--;\r\n      } else {\r\n        m--;\r\n      }\r\n    }\r\n    return result.join('''');\r\n  }\r\n\r\n  LCS( "132535365" , "123456789" );// => returns "12356"\r\n              </code>\r\n            </pre>\r\n          <div class="horizontal-space-md"></div>
','\r',char(13)),'\n',char(10)),'2018-01-14 02:13:48',1,1,'This is a classic computer science problem...');
INSERT INTO blog_post VALUES(default,'Merge Sort','merge-sort','2020-12-28 02:15:35.228008',replace(replace('
<img class="img-responsive center-image" src="../static/images/blog/mergesort_gif.gif" />\r\n            <p class="caption-center">A merge sort algorithm</p>\r\n\r\n            <strong>HISTORY</strong>\r\n            <p>The merge sort algorithm is an efficient divide and conquer sorting algorithm. It was invented by John von Neumann in 1945. John von Neumann (1903 - 1957) was a Hungarian-American mathematician, physicist and computer scientist. He is considered one of the greatest mathematicians of his time. </p>\r\n            \r\n            <img class="img-responsive center-image" src="../static/images/blog/neumann.gif" />\r\n            <p class="caption-center">John von Neumann</p>\r\n            <strong>HOW IT WORKS</strong>\r\n            <p>This algorithm is a divid and conquer type. This means that problem is divided into smaller subproblems for which a solution is very simple. There are two parts, one the divide part and then the merge part. The input array is divided into half and recursively called on each half. The base case is the empty array. Once the sub part is only one item long, the merging starts. Two sub sections are merged with the lower item taking the position  before the higher item. All sub sections are merged until finally the last two halves are merged. </p>\r\n            \r\n            <strong>RUN TIME</strong>\r\n            <p>What is the run time for this algorithm? \r\n            The merge part of the algorithm takes O(n) time because the array needs to be traversed once, assigning the lower of the two items to the current array position. Now this merge step is done once for each of the divide steps. This means that the time complexity is O(n log n) because it takes log n for all the merge steps.</p>\r\n            \r\n            <strong>EXAMPLE DESCRIPTION</strong>\r\n            <p>This is a python3 implementation of the merge sort algorithm. The divide step is done in the mergeSort function, while the merge step is done in the merge function. </p>\r\n\r\n            <p>Time Complexity:</p>\r\n            <ul>\r\n                <li> O(n log n)</li>\r\n            </ul>\r\n            <pre>\r\n              <code>\r\n  def mergeSort(arr, start, end):\r\n    if (start < end):\r\n      middle = start+((end-start)//2)\r\n      mergeSort(arr, start, middle)\r\n      mergeSort(arr, middle+1, end)\r\n      merge(arr, start, middle, end)\r\n    \r\n  def merge(arr, start, middle, end):\r\n    leftHalf = arr[start:middle+1]\r\n    rightHalf = arr[middle+1:end+1]\r\n    i=0\r\n    j=0\r\n    k=start\r\n    while (i < len(leftHalf) and j < len(rightHalf)):\r\n      if (leftHalf[i] <= rightHalf[j]):\r\n        arr[k] = leftHalf[i]\r\n        i += 1\r\n      else:\r\n        arr[k] = rightHalf[j]\r\n        j += 1\r\n      k += 1\r\n    while (i < len(leftHalf)):\r\n      arr[k] = leftHalf[i]\r\n      i += 1\r\n      k += 1\r\n    while (j < len(rightHalf)):\r\n      arr[k] = rightHalf[j]\r\n      j += 1\r\n      k += 1\r\n    \r\n  arr = [14, 7, 3, 12, 9, 11, 6, 2]\r\n  n = len(arr)\r\n  mergeSort(arr,0,n-1)\r\n  print(arr) # result equals [2, 3, 6, 7, 9, 11, 12, 14]\r\n\r\n              </code>\r\n            </pre>\r\n          <div class="horizontal-space-md"></div>','\r',char(13)),'\n',char(10)
),'2018-01-28 02:14:49',1,1,'The merge sort algorithm is an efficient divide and conquer sorting algorithm...');
INSERT INTO blog_post VALUES(default,'Heap''s Algorithm','heaps-algorithm','2021-01-05 02:21:45.097881',replace(replace('<p>Heaps algorithm is a simple and elegant solution to finding permutations. Finding permutations is one of the fundamental problems of computing and provides the basis for backtracking problems. However permutation problems are encountered less frequently in real world applications.</p>\r\n            <strong>HISTORY</strong>\r\n            \r\n            <p>This algorithm was first proposed by B. R. Heap in a paper in \r\n                The Computer Journal in 1963. You can read the paper \r\n<a href="https://academic.oup.com/comjnl/article/6/3/293/360213" target="_blank">here.</a>\r\n</p>\r\n            <p>Heaps algorithm finds all permutations of an array. It first iterates through the array and for each item finds the all possible permutations of length - 1 of the array. The recursive function works like so. It accepts the array and the size of it. It calls itself recursively, with the size of it getting shorter by one each time. When the size equals 1 it prints out the array and returns. Inside the for loop, if the size of the array is odd, a swap between the first and the last or size-1 positions occurs.</p>\r\n            <p> The loop continues and another recursive call is made on the new altered array. Again if the size variable is equal to one, the array is printed and the function returns. The loop continues and again, since the size is the same in this loop, in our case it is even, another swap is made.</p>\r\n            <p> The reason why this works is intuitively difficult to get. The wikipedia article even had an incorrect version on its page for a long time because it is often memorized and therefore it is easy to make a mistake.</p>\r\n            <p> <a target="_blank" class="plain_link" href="http://ruslanledesma.com/2016/06/17/why-does-heap-work.html">This article</a> provides a good explanation of why this works. Another excellent article generating permutations is <a target="_blank" class="plain_link" href="https://www.topcoder.com/blog/generating-permutations/">here</a>.</p> \r\n\r\n            <p>Time Complexity:</p>\r\n            <ul>\r\n                <li> O(n!)</li>\r\n            </ul>\r\n            <p>Space Complexity:</p>\r\n            <ul>\r\n                <li> O(n)</li>\r\n            </ul>\r\n            <pre>\r\n              <code>\r\nclass Solution:\r\n  def permute(self, nums):\r\n      """\r\n      :type nums: List[int]\r\n      :rtype: List[List[int]]\r\n      """\r\n      result = []\r\n      size = len(nums)\r\n      return self.permuteRec(nums, size, result)\r\n      \r\n  def permuteRec(self, nums, n, result):\r\n      if n == 1:\r\n        copy = nums[:]\r\n        result.append(copy)\r\n        return result\r\n      for i in range(n):\r\n        result = self.permuteRec(nums, n-1, n, result)\r\n        if (n % 2 == 1):\r\n          nums[0], nums[n-1] = nums[n-1], nums[0]\r\n        else:\r\n          nums[i], nums[n-1] = nums[n-1], nums[i]\r\n      return result\r\n              </code>\r\n            </pre>\r\n          <div class="horizontal-space-md"></div>','\r',char(13)),'\n',char(10)),'2018-02-15 02:16:03',1,1,'Heaps algorithm is a simple and elegant solution to finding permutations.');
INSERT INTO blog_post VALUES(default,'What is Functional Programming?','what-functional-programming','2020-12-28 02:20:37.514765',replace(replace('<p>March 30th, 2019</p>\r\n                                <br />\r\n                                <p>\r\n                                    Functional programming is a style of writing\r\n                                    software that stresses using pure functions,\r\n                                    avoiding modifying global state and employs\r\n                                    declarative statements. Declarative\r\n                                    programming style instructs what needs to\r\n                                    get done, instead of how. Functional\r\n                                    programming treats computation as the\r\n                                    evaluation of mathematical functions. This\r\n                                    is opposed to object oriented programming,\r\n                                    which is based on modifying global state.\r\n                                </p>\r\n                                <p>\r\n                                    Pure functions are functions that have the\r\n                                    same output for the same input. They do not\r\n                                    depend on and do not modify any global\r\n                                    state. For example: calling a function with\r\n                                    the same input twice will give the same\r\n                                    output. Pure functions can be easily\r\n                                    isolated, and reused. This makes testing and\r\n                                    thinking about the code very easy, as you do\r\n                                    not require to set up any environment and\r\n                                    not worry about hidden edge cases. To test,\r\n                                    you only need to pass in a value and expect\r\n                                    to get a value returned.\r\n                                </p>\r\n                                <p>\r\n                                    When using pure functions, memoization is very easy,\r\n                                    you only need to calculate the output for an\r\n                                    input once and cache the result. This is\r\n                                    easy as no global state is modified and\r\n                                    there are no side effects of the function.\r\n                                </p>\r\n                                <p>\r\n                                    Functional programming avoids changing\r\n                                    global state, stresses immutability and uses\r\n                                    declarative statements.\r\n                                </p>','\r',char(13)),'\n',char(10)),'2019-03-30 02:19:30',1,1,'Functional programming is a style of writing software that stresses using pure functions, avoiding modifying global state and employs declarative statements...');
INSERT INTO blog_post VALUES(default,'Helpful git Commands','helpful-git-commands','2020-12-28 02:21:41.457356',replace(replace('<br />\r\n                <p>\r\n                  How to set github user email in git terminal specific to a\r\n                  project?\r\n                </p>\r\n                <code>\r\n                  git config user.email "your@email.com"\r\n                </code>\r\n                <br />\r\n                <br />\r\n                <p>\r\n                  How to undo the last git commit and revert the changes?\r\n                </p>\r\n                <code>\r\n                  git reset --hard HEAD~1\r\n                </code>\r\n                <br />\r\n                <br />\r\n                <p>\r\n                  How to undo the last git commit and keep the changes?\r\n                </p>\r\n                <code>\r\n                  git reset --soft HEAD~1\r\n                </code>\r\n                <br />\r\n                <br />\r\n                <p>\r\n                  How to revert multiple commits, inclusively?\r\n                </p>\r\n                <code>\r\n                  git revert --no-commit < hash of last commit to revert >..HEAD\r\n                </code>\r\n                <br />\r\n                <br />\r\n                <p>\r\n                  How to remove remote directory after adding to .gitignore?\r\n                </p>\r\n                <code>\r\n                  git rm -r --cached <directory or file>\r\n                </code>','\r',char(13)),'\n',char(10)),'2019-09-30 02:21:05',1,1,'How to set github user email in git terminal specific to a project? ...');
INSERT INTO blog_post VALUES(default,'2020 in Books','2020-books','2021-01-05 15:26:12.057257',replace(replace('<h3>Top 3 Favorites:</h3>\r\n<strong>1. Operating Manual for Spaceship Earth</strong>\r\n<p>Buckminster Fuller</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/operating_manual.jpeg" />\r\n\r\n\r\n<strong>2. Benjamin Franklin</strong>\r\n<p>Walter Isaacson</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/ben_franklin.jpeg" />\r\n\r\n<strong>3. Zen Mind, Beginners Mind</strong>\r\n<p>Shunryu Suzuki</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/zen_mind.jpeg" />\r\n<br />\r\n\r\n<p>The others, all of which are awesome:</p>\r\n<br />\r\n<br />\r\n<p>\r\n  Discover Your Dragon\r\n</p>\r\n<img class="img-responsive center-image img-w-med" src="../static/images/blog/discover_your_dragon.jpg" />\r\n<p>\r\n  Do Androids Dream of Electric Sheep? - Philip K Dick\r\n</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/do_androids_dream.jpeg" />\r\n\r\n<p>\r\n  The Three Body Problem\r\n</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/three_body.jpeg" />\r\n<p>\r\n  The Secrets of a JavaScript Ninja\r\n</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/secrets_of_js.jpeg" />\r\n<p>\r\n  The Four Agreements\r\n</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/the_four_agreements.jpeg" />\r\n<p>\r\n  The Volunteer: One Man, an Underground Army, and the Secret Mission to Destroy Auschwitz\r\n</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/the_volunteer.jpeg" />\r\n<p>The Future of Business: An Introduction to Artificial Intelligence</p>\r\n<p>By David Vandergrift</p>\r\n<img class="img-responsive center-image" src="../static/images/blog/the_future_of_business.jpeg" />\r\n<br />\r\n<br />\r\n<p>\r\n  Lifehacked: How One Family from the Slums Made Millions Selling Apps\r\n</p>\r\n<p>\r\n  Learn React Hooks\r\n</p>\r\n<p>\r\n  The Little Prince\r\n</p>\r\n<p>\r\n  The Pearl - John Steinbeck\r\n</p>\r\n<p>\r\n  A New Earth - Eckhart Tolle\r\n</p>','\r',char(13)),'\n',char(10)),'2021-01-05 04:39:17',1,1,'3 Favorites plus all of the other awesome books I read this year');
INSERT INTO blog_post VALUES(default,'Why create a VR Meditation Room?','why-create-vr-meditation-room','2021-07-27 12:59:21.280285',replace(replace('<strong>\r\n  Why create a VR Meditation Room?\r\n</strong>\r\n<br />\r\n<br />\r\n<p>\r\n  I am creating a meditation room in VR because every person that is interested in\r\n  meditation can benefit from having access to their own dedicated space for this practice.\r\n  VR allows one to enter a setting that is conducive to feelings of sacredness, tranquility\r\n  and deep concentration,\r\n  no matter where you are in the physical world. Here one may find refuge from\r\n  surroundings that contain distractions and messiness. This application\r\n  will allow anyone to enter into a sanctuary with ease. It will also provide a\r\n  timer with a gong for support of a regular practice.\r\n</p>\r\n<br />\r\n<strong>\r\n  What features will the VR Meditation Room have when it is done?\r\n</strong>\r\n<br />\r\n<br />\r\n<p>The first iteration will include:</p>\r\n<ol>\r\n  <li>An indoor space that is inside a dome structure (Buckminster Fuller inspired)</li>\r\n  <li>A sculpture of a Buddha in meditation pose</li>\r\n  <li>A meditation timer with gong sound for start and end</li>\r\n  <li>Minimalist design of the indoor space that is conducive to concentration and contemplation</li>\r\n  <li>Available to play on Oculus Quest 1 and 2, from SideQuest.com</li>\r\n</ol>\r\n<br />\r\n<br />\r\n<strong>\r\n  How did you get the idea to make a meditation room in VR?\r\n</strong>\r\n<br />\r\n<br />\r\n<p>\r\n  The idea came from my own personal need for a meditation timer. I use a very simple\r\n  one I downloaded from the Apple App Store on my iPhone. Every morning\r\n  I meditate for ten minutes, and the gong sound marks\r\n  the end. At one point I realized that it would be really nice to have a whole meditation room\r\n  in VR that would include a timer, and contain things like an ancient buddhist sculpture, and other\r\n  buddhist art.\r\n</p>','\r',char(13)),'\n',char(10)),'2021-01-06 20:17:51',1,1,'Summary of the intentions for this app, features list and road map');
INSERT INTO blog_post VALUES(default,'Nand2Tetris Part II Chapter 8','nand2tetris-part-ii-chapter-8','2021-09-14 00:03:45.589033',replace(replace('<h3>\r\n  Notes on Chapter 8 - Week 2 of Nand2Tetris Part 2\r\n</h3>\r\n<br />\r\n<br />\r\n<h3>Unit 2.4: Function Call and Return: Implementation Preview</h3>\r\n<ul>\r\n  <li>We create state when we run a function</li>\r\n  <li>We have to save the state and return to it when calling a new function</li>\r\n  <li>When the function returns, we recycle the state</li>\r\n  <li>The Calling pattern is LIFO, Last In First Out</li>\r\n</ul>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_1.png" alt="">\r\n</div>\r\n<ul>\r\n  <li>The frame is the return address and the memory segments of the caller (LCL, ARG, THIS, THAT)</li>\r\n  <li>1. Copy the return value onto argument 0</li>\r\n  <li>2. Restores the segment pointers of the caller</li>\r\n  <li>3. Clears the stack</li>\r\n  <li>4. Sets SP for the caller</li>\r\n  <li>5 Jumps to the return address within the caller''s code</li>\r\n  <li>This is complicated, but this is not a surprise, because we are creating a little brain. It has the capacity to do one function, put it on hold, and then return to it when it''s done. This is sophisticated, no wonder the implementation is non trivial.</li>\r\n  <li>Very simple from the abstract view: call function, and get the result, but very complicated behind the scenes</li>\r\n</ul>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_2.png" alt="">\r\n</div>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_3.png" alt="">\r\n</div>\r\n<h3>Unit 2.5: Function Call and Return: Run-time Simulation</h3>\r\n<ul>\r\n<li>example of calling factorial of 3, run time simulation</li>\r\n</ul>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_4.png" alt="">\r\n</div>\r\n<h3>\r\n  Unit 2.6: Function Call and Return Implementation\r\n</h3>\r\n<ul>\r\n  <li>Handling call:</li>\r\n  <ul>\r\n    <li> push returnAddress (using a label)</li>\r\n    <li>push LCL, ARG, THIS, THAT // save of the caller</li>\r\n    <li>ARG = SP - 5 - nArgs // Reposition ARG</li>\r\n    <li>LCL = SP // Reposition LCL</li>\r\n    <li>goto functionName // Transfers control to the called function</li>\r\n    <li>(returnAddress) // Declare a label for the return-address</li>\r\n  </ul>\r\n</ul>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_5.png" alt="">\r\n</div>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_6.png" alt="">\r\n</div>\r\n<br />\r\n<h3>\r\n  Unit 2.7: VM Implementation on the Hack Platform\r\n</h3>\r\n<ul>\r\n  <li>VM programming convention: One file must be named Main.vm, with one function named main</li>\r\n  <li>Bootstrap code: SP=256, Call Sys.init</li>\r\n  <li>Special symbols</li>\r\n</ul>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_7.png" alt="">\r\n</div>\r\n<h3>\r\n  Unit 2.8: VM Translator: Proposed Implementation\r\n</h3>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_8.png" alt="">\r\n</div>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_9.png" alt="">\r\n</div>\r\n<div class="blog__image">\r\n  <img src="../static/images/blog/notes/week_8_10.png" alt="">\r\n</div>\r\n<br />\r\n<h3>Lecture Slides</h3>\r\n<br />\r\n<embed\r\n    src="https://konradgnat.com/static/pdf/nand2Tetris_chapter_8_slides.pdf"\r\n    type="application/pdf"\r\n    frameBorder="0"\r\n    scrolling="auto"\r\n    height="900px"\r\n    width="100%"\r\n></embed>\r\n<br />\r\n<h3>Chapter 8 from the course book</h3>\r\n<br />\r\n<embed\r\n    src="https://konradgnat.com/static/pdf/nand2Tetris_chapter_8.pdf"\r\n    type="application/pdf"\r\n    frameBorder="0"\r\n    scrolling="auto"\r\n    height="900px"\r\n    width="100%"\r\n></embed>','\r',char(13)),'\n',char(10)),'2021-09-10 12:56:58',1,1,'Notes on Chapter 8');
